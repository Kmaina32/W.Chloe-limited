{
  "entities": {
    "Artist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Artist",
      "type": "object",
      "description": "Represents an artist, actor, or DJ profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the artist.",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "The name of the artist."
        },
        "genre": {
          "type": "string",
          "description": "The genre of music or performance the artist specializes in."
        },
        "country": {
          "type": "string",
          "description": "The country the artist is from."
        },
        "imageURL": {
          "type": "string",
          "description": "URL of the artist's profile image.",
          "format": "uri"
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the artist."
        },
        "socialMediaLinks": {
          "type": "array",
          "description": "Array of social media links for the artist",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "genre",
        "country",
        "imageURL"
      ]
    },
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents an event featuring artists.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the event.",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "The name of the event."
        },
        "date": {
          "type": "string",
          "description": "The date and time of the event.",
          "format": "date-time"
        },
        "location": {
          "type": "string",
          "description": "The location of the event."
        },
        "artistIds": {
          "type": "array",
          "description": "References to Artists. (Relationship: Event N:N Artist)",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the event."
        },
        "imageURL": {
          "type": "string",
          "description": "URL of the event's promotional image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "date",
        "location"
      ]
    },
    "Partner": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Partner",
      "type": "object",
      "description": "Represents a partner or sponsor of the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the partner.",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "The name of the partner organization."
        },
        "logoURL": {
          "type": "string",
          "description": "URL of the partner's logo.",
          "format": "uri"
        },
        "websiteURL": {
          "type": "string",
          "description": "URL of the partner's website.",
          "format": "uri"
        },
        "description": {
          "type": "string",
          "description": "A description of the partner and their relationship with the platform."
        }
      },
      "required": [
        "id",
        "name",
        "logoURL"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator user with access to the admin panel.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the administrator.",
          "format": "uuid"
        },
        "username": {
          "type": "string",
          "description": "The username of the administrator."
        },
        "email": {
          "type": "string",
          "description": "The email address of the administrator.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "username",
        "email"
      ]
    },
    "Content": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Content",
      "type": "object",
      "description": "Represents curated content managed by the admin, to be displayed across the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the content item.",
          "format": "uuid"
        },
        "contentType": {
          "type": "string",
          "description": "The type of content (e.g., 'Hero Section', 'Featured Artist', 'Latest Event', 'Partner Showcase')."
        },
        "contentData": {
          "type": "string",
          "description": "A JSON string containing the actual content data, specific to the contentType."
        },
        "pageLocation": {
          "type": "string",
          "description": "The page where this content is displayed (e.g., 'Home', 'Artists', 'Events', 'Partners')."
        },
        "order": {
          "type": "number",
          "description": "The order in which this content is displayed on the page."
        },
        "isActive": {
          "type": "boolean",
          "description": "A flag indicating whether the content is currently active and visible on the platform."
        }
      },
      "required": [
        "id",
        "contentType",
        "contentData",
        "pageLocation",
        "order",
        "isActive"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/admins/{adminId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Collection of administrator user IDs. Existence of a document with the user's ID grants admin privileges.",
          "params": [
            {
              "name": "adminId",
              "description": "The Firebase Auth UID of the administrator."
            }
          ]
        }
      },
      {
        "path": "/artists/{artistId}",
        "definition": {
          "entityName": "Artist",
          "schema": {
            "$ref": "#/backend/entities/Artist"
          },
          "description": "Collection of artist profiles. Accessible and manageable by admins.",
          "params": [
            {
              "name": "artistId",
              "description": "Unique identifier for the artist."
            }
          ]
        }
      },
      {
        "path": "/events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": {
            "$ref": "#/backend/entities/Event"
          },
          "description": "Collection of event listings. Accessible and manageable by admins.",
          "params": [
            {
              "name": "eventId",
              "description": "Unique identifier for the event."
            }
          ]
        }
      },
      {
        "path": "/partners/{partnerId}",
        "definition": {
          "entityName": "Partner",
          "schema": {
            "$ref": "#/backend/entities/Partner"
          },
          "description": "Collection of partner profiles. Accessible and manageable by admins.",
          "params": [
            {
              "name": "partnerId",
              "description": "Unique identifier for the partner."
            }
          ]
        }
      },
      {
        "path": "/content/{contentId}",
        "definition": {
          "entityName": "Content",
          "schema": {
            "$ref": "#/backend/entities/Content"
          },
          "description": "Collection of curated content items. Accessible and manageable by admins.",
          "params": [
            {
              "name": "contentId",
              "description": "Unique identifier for the content item."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure prioritizes administrative control over content, artists, events, and partners. To ensure authorization independence and simplify security rules, all relevant data is structured to avoid complex `get()` calls. The structure uses structural segregation to ensure that each collection has a homogeneous security posture. An `admins` collection stores administrator UIDs to control access to content and entity management. All content is centrally managed under the `content` collection, enabling easy querying and updates for front-end display. Artists, Events and Partners are stored in flat collections so the Admin can easily create, update and delete any resource.\n\nThe structure achieves Authorization Independence by relying on the `admins` collection for authorization. Security rules can simply check for the existence of a user's UID in the `admins` collection to grant access to manage content, artists, events, and partners. This avoids hierarchical dependencies.\n\nIt supports QAPs (Rules are not Filters) by segregating data into distinct collections based on entity type (artists, events, partners, content). This allows for secure `list` operations without requiring complex filtering logic in the security rules."
  }
}